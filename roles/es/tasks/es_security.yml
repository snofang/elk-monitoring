---
#---------TLS certs ----------------
- name: create elasticsearch certs folder
  file:
    path: "{{ es_install_dir }}/config/certs"
    state: directory
    owner: "{{ username }}"
    group: "{{ usergroup }}"
  become: yes

- name: copy elasticsearch ca cert
  copy:
    src: "certs/ca.pem"
    dest: "{{ es_install_dir }}/config/certs/ca.pem"
  register: copy_es_cert

- name: copy elasticsearch key
  copy:
    src: "certs/{{inventory_hostname}}.key"
    dest: "{{ es_install_dir }}/config/certs/{{inventory_hostname}}.key"
  register: copy_es_cert

- name: copy elasticsearch cert
  copy:
    src: "certs/{{inventory_hostname}}.pem"
    dest: "{{ es_install_dir }}/config/certs/{{inventory_hostname}}.pem"
  register: copy_es_cert



#--------- bootstrap user ----------------

- name: create the keystore if it doesn't exist yet
  command: >
    {{ es_install_dir }}/bin/elasticsearch-keystore create
  args:
    creates: "{{ es_conf_dir }}/elasticsearch.keystore"
  environment:
    ES_PATH_CONF: "{{ es_conf_dir }}"

- name: check if bootstrap password is set
  command: >
    {{es_install_dir}}/bin/elasticsearch-keystore list
  register: list_keystore
  changed_when: False
  environment:
    ES_PATH_CONF: "{{ es_conf_dir }}"
  check_mode: no

- name: bootstrap password for elastic user
  shell: echo "{{es_admin_password}}" | {{es_install_dir}}/bin/elasticsearch-keystore add -x 'bootstrap.password'
  when:
    - list_keystore is defined and 'bootstrap.password' not in list_keystore.stdout_lines
  environment:
    ES_PATH_CONF: "{{ es_conf_dir }}"
#      no_log: true

- name: Set elasticsearch.keystore Permissions
  become: yes
  file:
    state: file
    path: "{{ es_conf_dir }}/elasticsearch.keystore"
    mode: "0660"

