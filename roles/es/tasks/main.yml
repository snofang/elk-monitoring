- name: copy elasticsearch
  copy:
    src: "files/{{es_repo_file}}"
    dest: "{{apps_dir}}/{{es_repo_file}}"
  register: copy_es

- name: create elasticsearch directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
  with_items:
    - "{{ es_install_dir }}"
    - "{{ es_data_dir }}"
    - "{{ es_logs_dir }}"

- name: extract elasticsearch
  unarchive:
    src: "{{ apps_dir }}/{{ es_repo_file }}"
    dest: "{{ es_install_dir }}/"
    remote_src: yes
    extra_opts:
      - --strip-components=1
  when: copy_es.changed

- name: copy elasticsearch config
  template:
    src: "elasticsearch.yml.j2"
    dest: "{{ es_install_dir }}/config/elasticsearch.yml"
  register: copy_es_config

- name: copy es start scripts environment variables
  template:
    src: "elasticsearch_ev.j2"
    dest: /etc/default/elasticsearch
    owner: root
    group: root
    mode: 0755
  become: yes
  register: copy_es_service_script

- name: copy es start scripts
  template:
    src: "elasticsearch.sysv2.j2"
    dest: /etc/init.d/elasticsearch
    owner: root
    group: root
    mode: 0755
  become: yes
  register: copy_es_service_script

#- name: set vm.max_map_count to 262144 in sysctl
#  sysctl:
#    name: "{{ item.key }}"
#    value: "{{ item.value }}"
#  with_items:
#  - { key: "vm.max_map_count", value: "262144" }
#  become: yes

- name: configure system settings, file descriptors and number of threads
  pam_limits:
    domain: "{{username}}"
    limit_type: "{{item.limit_type}}"
    limit_item: "{{item.limit_item}}"
    value: "{{item.value}}"
  with_items:
    - { limit_type: '-', limit_item: 'nofile', value: 65535 }
    - { limit_type: '-', limit_item: 'nproc', value: 4096}
#    - { limit_type: 'soft', limit_item: 'memlock', value: unlimited }
#    - { limit_type: 'hard', limit_item: 'memlock', value: unlimited }
  become: yes
  register: system_limit_change

- name: reload settings from all system configuration files
  shell: sysctl --system
  become: yes
  when: system_limit_change.changed

- name: include es_security.yml
  include: es_security.yml

- name: restart elasticsearch service
  service:
    state: restarted
    name: elasticsearch
    enabled: yes
  become: yes
  register: es_restart
  when: copy_es_service_script.changed or copy_es_config.changed or copy_es.changed or system_limit_change.changed

- name: "waiting for elasticsearch to come up"
  uri:
    url: "{{es_api_uri}}"
    method: GET
    user: "{{es_superuser}}"
    password: "{{es_superuser_password}}"
    force_basic_auth: yes
    status_code: [200, 401]
    validate_certs: no
  register: result
  until: result.status == 200 or result.status == 401
  retries: 60
  delay: 5
  when: es_restart.changed

- name: Making sure elasticsearch is started (in case that there is not any config changes)
  service:
    state: started
    name: elasticsearch
    enabled: yes
  become: yes
  register: es_is_started
    
- name: "Waiting for elasticsearch to come up"
  uri:
    url: "{{es_api_uri}}"
    method: GET
    user: "{{es_superuser}}"
    password: "{{es_superuser_password}}"
    force_basic_auth: yes
    status_code: [200, 401]
    validate_certs: no
  register: result
  until: result.status == 200 or result.status == 401
  retries: 60
  delay: 5
  when: es_is_started.changed

- name: include es_builtin_users.yml
  include: es_builtin_users.yml
