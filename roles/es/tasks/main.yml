- name: copy elasticsearch
  copy:
    src: "files/{{es_repo_file}}"
    dest: "{{apps_dir}}/{{es_repo_file}}"
  register: copy_es

- name: create elasticsearch directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
  with_items:
    - "{{ es_install_dir }}"
    - "{{ es_data_dir }}"
    - "{{ es_logs_dir }}"

- name: extract elasticsearch
  unarchive:
    src: "{{ apps_dir }}/{{ es_repo_file }}"
    dest: "{{ es_install_dir }}/"
    remote_src: yes
    extra_opts:
      - --strip-components=1
  when: copy_es.changed

- name: create elasticsearch certs folder
  file:
    path: "{{ es_install_dir }}/config/certs"
    state: directory
    owner: "{{ username }}"
    group: "{{ usergroup }}"
  become: yes

- name: copy elasticsearch ca cert
  copy:
    src: "certs/ca.pem"
    dest: "{{ es_install_dir }}/config/certs/ca.pem"
  register: copy_es_cert

- name: copy elasticsearch key
  copy:
    src: "certs/{{inventory_hostname}}.key"
    dest: "{{ es_install_dir }}/config/certs/{{inventory_hostname}}.key"
  register: copy_es_cert

- name: copy elasticsearch cert
  copy:
    src: "certs/{{inventory_hostname}}.pem"
    dest: "{{ es_install_dir }}/config/certs/{{inventory_hostname}}.pem"
  register: copy_es_cert

- name: copy elasticsearch config
  template:
    src: "elasticsearch.yml.j2"
    dest: "{{ es_install_dir }}/config/elasticsearch.yml"
  register: copy_es_config

- name: copy elasticsearch service scripts
  template:
    src: "elastic-systemd.j2"
    dest: /etc/systemd/system/elasticsearch.service
    owner: root
    group: root
  become: yes
  register: copy_es_service_script

- name: set vm.max_map_count to 262144 in sysctl
  sysctl: 
    name: "{{ item.key }}"
    value: "{{ item.value }}"
  with_items:
  - { key: "vm.max_map_count", value: "262144" }
  become: yes

- name: restart elasticsearch service
  systemd:
    daemon_reload: yes
    state: restarted
    name: elasticsearch.service
    enabled: yes
  become: yes
  register: es_restart
  when: copy_es_service_script.changed or copy_es_config.changed or copy_es.changed

- name: "waiting for elasticsearch to come up"
  uri:
    url: "http://{{ansible_host}}:{{es_port}}/"
    status_code: [200,401]
  register: result
  until: result.status == 200 or result.status == 401
  retries: 60
  delay: 5
  when: es_restart.changed

- name: Making sure elasticsearch is started (in case that there is not any config changes)
  systemd:
    state: started
    name: elasticsearch.service
    enabled: yes
    daemon_reload: no
  become: yes
  register: es_is_started
    
- name: "Waiting for elasticsearch to come up"
  uri:
    url: "http://{{ansible_host}}:{{es_port}}/"
    status_code: [200,401]
  register: result
  until: result.status == 200 or result.status == 401
  retries: 60
  delay: 5
  when: es_is_started.changed

