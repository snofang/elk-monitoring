---

# based on this guide: https://gist.github.com/Soarez/9688998

- name: create cert directory
  local_action:
    module: file
    path: "{{cert_dir}}"
    state: directory

- name: ca private key
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{tls_ca_key}} ]
      then
      openssl genrsa -out {{cert_dir}}/{{tls_ca_key}} {{tls_ca_key_size}}
      fi
  run_once: true
  args:
    executable: /bin/bash

- name: self-signed cert for ca
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{tls_ca_cert}} ]
      then
      openssl req -x509 -new -days {{tls_ca_valid_days}} -sha256 -nodes -key {{cert_dir}}/{{tls_ca_key}} -out {{cert_dir}}/{{tls_ca_cert}} \
      -subj "{% if tls_ca_country is defined%}/C={{tls_ca_country}}{% endif %}{% if tls_ca_state is defined%}/ST={{tls_ca_state}}{% endif %}{% if tls_ca_locality is defined %}/L={{tls_ca_locality}}{% endif %}{% if tls_ca_organization is defined %}/O={{tls_ca_organization}}{% endif %}{% if tls_ca_organizationalunit is defined %}/OU={{tls_ca_organizationalunit}}{% endif %}/CN={{tls_ca_commonname}}{% if tls_ca_email is defined %}/emailAddress={{tls_ca_email}}{% endif %}"
      fi
  args:
    executable: /bin/bash
  run_once: true

- name: server private key
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.key ]
      then
      openssl genrsa -out {{cert_dir}}/{{inventory_hostname}}.key {{tls_ca_key_size}}
      fi
  args:
    executable: /bin/bash

- name: server csr
  local_action:
    module: |
      shell openssl req -new -key {{cert_dir}}/{{inventory_hostname}}.key -nodes -out {{cert_dir}}/{{inventory_hostname}}.csr -subj \
      "/CN={{inventory_hostname}}"
  args:
    executable: /bin/bash

- name: server certificate extensions file
  local_action:
    module: template
    src: templates/server-cert-extfile.cnf.j2
    dest: "{{cert_dir}}/{{inventory_hostname}}-extfile.cnf"

- name: server cert signing by CA - pem
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.pem ]
      then
      openssl x509 -req -sha256 -days {{tls_server_valid_days}} \
      -CA "{{cert_dir}}/{{tls_ca_cert}}" -CAkey "{{cert_dir}}/{{tls_ca_key}}" -set_serial {{ 999999999 | random }} \
      -in "{{cert_dir}}/{{inventory_hostname}}.csr" -out "{{cert_dir}}/{{inventory_hostname}}.pem" \
      -extfile "{{cert_dir}}/{{inventory_hostname}}-extfile.cnf"
      fi
  args:
    executable: /bin/bash

#- name: server cert conversion; pem to pk12
#  local_action:
#    module: |
#      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.pfx ]
#      then
#      openssl pkcs12 -export -nodes -name "y{{inventory_hostname}}-certificate" \
#      -out "{{cert_dir}}/{{inventory_hostname}}.pfx" -inkey "{{cert_dir}}/{{inventory_hostname}}.key" -in "{{cert_dir}}/{{inventory_hostname}}.pem"
#      fi
#  args:
#    executable: /bin/bash