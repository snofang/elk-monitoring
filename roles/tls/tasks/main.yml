---

# based on this guide: https://gist.github.com/Soarez/9688998

- name: create cert directory
  local_action:
    module: file
    path: "{{cert_dir}}"
    state: directory

- name: ca private key
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{tls_ca_key}} ]
      then
      openssl genrsa -out {{cert_dir}}/{{tls_ca_key}} {{tls_ca_key_size}}
      fi
  run_once: true
  args:
    executable: /bin/bash

- name: self-signed cert for ca
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{tls_ca_cert}} ]
      then
      openssl req -x509 -new -days {{tls_ca_valid_days}} -sha256 -nodes -key {{cert_dir}}/{{tls_ca_key}} -out {{cert_dir}}/{{tls_ca_cert}} \
      -subj "{% if tls_ca_country is defined%}/C={{tls_ca_country}}{% endif %}{% if tls_ca_state is defined%}/ST={{tls_ca_state}}{% endif %}{% if tls_ca_locality is defined %}/L={{tls_ca_locality}}{% endif %}{% if tls_ca_organization is defined %}/O={{tls_ca_organization}}{% endif %}{% if tls_ca_organizationalunit is defined %}/OU={{tls_ca_organizationalunit}}{% endif %}/CN={{tls_ca_commonname}}{% if tls_ca_email is defined %}/emailAddress={{tls_ca_email}}{% endif %}"
      fi
  args:
    executable: /bin/bash
  run_once: true

- name: server private key
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.key ]
      then
      openssl genrsa -aes128 -out {{cert_dir}}/{{inventory_hostname}}.key -passout pass:{{tls_password}} {{tls_ca_key_size}}
      fi
  args:
    executable: /bin/bash

#openssl pkcs8 -in certs/logstash.key -topk8 -nocrypt -out certs/logstash_pkcs8.key

- name: server private key - pkcs8 format
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.p8 ]
      then
      openssl pkcs8 -in {{cert_dir}}/{{inventory_hostname}}.key -passin pass:{{tls_password}} -topk8 -passout pass:{{tls_password}} -out {{cert_dir}}/{{inventory_hostname}}.p8 -v1 PBE-SHA1-3DES
      fi
  args:
    executable: /bin/bash

- name: server csr
  local_action:
    module: |
      shell openssl req -new -key {{cert_dir}}/{{inventory_hostname}}.key -passin pass:{{tls_password}} -nodes -out {{cert_dir}}/{{inventory_hostname}}.csr -subj \
      "/CN={{inventory_hostname}}"
  args:
    executable: /bin/bash

- name: server certificate extensions file
  local_action:
    module: template
    src: templates/server-cert-extfile.cnf.j2
    dest: "{{cert_dir}}/{{inventory_hostname}}-extfile.cnf"

- name: server cert signing by CA - pem
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.pem ]
      then
      openssl x509 -req -sha256 -days {{tls_server_valid_days}} \
      -CA "{{cert_dir}}/{{tls_ca_cert}}" -CAkey "{{cert_dir}}/{{tls_ca_key}}" -set_serial {{ 999999999 | random }} \
      -in "{{cert_dir}}/{{inventory_hostname}}.csr" -out "{{cert_dir}}/{{inventory_hostname}}.pem" \
      -extfile "{{cert_dir}}/{{inventory_hostname}}-extfile.cnf"
      fi
  args:
    executable: /bin/bash

# to convent pem certs to pkcs12
# openssl pkcs12 -export -out certificate.p12 -inkey privateKey.key -in certificate.crt -certfile CACert.crt

- name: server cert conversion; pem to pk12
  local_action:
    module: |
      shell if [ ! -e {{cert_dir}}/{{inventory_hostname}}.p12 ]
      then
      openssl pkcs12 -export \
      -chain -CAfile {{cert_dir}}/{{tls_ca_cert}} \
      -out "{{cert_dir}}/{{inventory_hostname}}.p12" \
      -passout pass:"{{tls_password}}" \
      -inkey "{{cert_dir}}/{{inventory_hostname}}.key" \
      -passin pass:"{{tls_password}}" \
      -in "{{cert_dir}}/{{inventory_hostname}}.pem" \
      -certfile "{{cert_dir}}/{{tls_ca_cert}}"
      fi
  args:
    executable: /bin/bash




#---------TLS certs ----------------
- name: copy generated certs and key
  block:
    - name: create certs folder
      file:
        path: "{{ tls_copy_dir }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ usergroup }}"
      become: yes

    - name: copy ca cert
      copy:
        src: "{{cert_dir}}/{{tls_ca_cert}}"
        dest: "{{ tls_copy_dir }}/{{tls_ca_cert}}"
      register: copy_ca_cert

    - name: copy host key
      copy:
        src: "{{cert_dir}}/{{inventory_hostname}}.key"
        dest: "{{ tls_copy_dir }}/{{inventory_hostname}}.key"
      register: copy_host_key

    - name: copy host key - pkcs8 format
      copy:
        src: "{{cert_dir}}/{{inventory_hostname}}.p8"
        dest: "{{ tls_copy_dir }}/{{inventory_hostname}}.p8"
      register: copy_host_key_pkcs8

    - name: copy host key - pkcs12 format
      copy:
        src: "{{cert_dir}}/{{inventory_hostname}}.p12"
        dest: "{{ tls_copy_dir }}/{{inventory_hostname}}.p12"
      register: copy_host_key_pkcs12

    - name: copy host cert
      copy:
        src: "{{cert_dir}}/{{inventory_hostname}}.pem"
        dest: "{{ tls_copy_dir }}/{{inventory_hostname}}.pem"
      register: copy_host_cert

  when: tls_copy and tls_copy_dir is defined