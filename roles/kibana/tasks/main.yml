- name: copy kibana
  copy:
    src: "files/{{kibana_repo_file}}"
    dest: "{{apps_dir}}/{{kibana_repo_file}}"
  register: copy_kibana

- name: create kibana directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ username }}"
  with_items:
    - "{{ kibana_install_dir }}"
    - "{{ kibana_data_dir }}"
    - "{{ kibana_logs_dir }}"

- name: extract kibana
  unarchive:
    src: "{{ apps_dir }}/{{ kibana_repo_file }}"
    dest: "{{ kibana_install_dir }}/"
    remote_src: yes
    extra_opts:
      - --strip-components=1
  when: copy_kibana.changed

- name: copy kibana config
  template:
    src: "kibana.yml.j2"
    dest: "{{ kibana_install_dir }}/config/kibana.yml"
  register: copy_kibana_config

- name: copy kibana service script
  template:
    src: "kibana.service.j2"
    dest: /etc/systemd/system/kibana.service
    owner: root
    group: root
  become: yes
  register: copy_kibana_service_script

- name: kibana security configuration
  include: kibana_security.yml
  notify:
    - restart kibana

- name: restart kibana service
  systemd:
    daemon_reload: yes
    state: restarted
    name: kibana.service
    enabled: yes
  become: yes
  register: restart_kibana_service
  when: copy_kibana_config.changed or copy_kibana_service_script.changed or copy_kibana.changed

- name: "waiting for kibana to come up"
  uri:
    url: "{{kibana_api_uri}}"
    status_code: "200"
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  when: restart_kibana_service.changed

- name: making sure kibana is started (in case that there is not any config change)
  systemd:
    state: started
    name: kibana.service
    enabled: yes
    daemon_reload: no
  become: yes
  register: kibana_is_started

- name: "waiting for kibana to come up"
  uri:
    url: "{{kibana_api_uri}}"
    status_code: "200"
    validate_certs: no
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  when: kibana_is_started.changed

- name: debugging
  debug:
    msg: the value is {{kibana_dashboard_import}} and the path is {{kibana_dashboard_path}}

- name: importing dashboard saved object
  local_action:
    module: >
      shell curl -X POST "{{kibana_api_uri}}/api/saved_objects/_import?overwrite=true"
      -H "kbn-xsrf: true"
      -u elastic:{{elastic_password}}
      --form file=@{{kibana_dashboard_path}}
      --cacert {{cert_dir}}/{{tls_ca_cert}}
      --write-out '%{http_code}' --silent
      --output /dev/null
  args:
    executable: /bin/bash
  register: statusCode
  failed_when: statusCode.stdout|int != 200
  when: kibana_dashboard_import

